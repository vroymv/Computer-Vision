#include "esp_camera.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

#define CAMERA_MODEL_AI_THINKER // Has PSRAM

#include "camera_pins.h"

// ===========================
// Enter your WiFi credentials
// ===========================
const char* ssid = "Vroy";
const char* password = "12345678";

void startCameraServer();

const int buttonPin = 14;     // the number of the pushbutton pin
const int ledPin = 33;       // the number of the LED pin
int buttonState = 0;         // variable for reading the pushbutton status
unsigned long previousMillis = 0;  // stores the time of the last button press
unsigned long currentMillis = 0;   // stores the time of the current button press
const unsigned long interval = 5000;  // minimum interval in milliseconds

void setupLedFlash(int pin);

void setup() {
  Serial.begin(115200);
  pinMode(buttonPin, INPUT_PULLDOWN);
  pinMode(4,OUTPUT);
  Serial.setDebugOutput(true);
  Serial.println();

  camera_config_t config;
  config.ledc_channel = LEDC_CHANNEL_0;
  config.ledc_timer = LEDC_TIMER_0;
  config.pin_d0 = Y2_GPIO_NUM;
  config.pin_d1 = Y3_GPIO_NUM;
  config.pin_d2 = Y4_GPIO_NUM;
  config.pin_d3 = Y5_GPIO_NUM;
  config.pin_d4 = Y6_GPIO_NUM;
  config.pin_d5 = Y7_GPIO_NUM;
  config.pin_d6 = Y8_GPIO_NUM;
  config.pin_d7 = Y9_GPIO_NUM;
  config.pin_xclk = XCLK_GPIO_NUM;
  config.pin_pclk = PCLK_GPIO_NUM;
  config.pin_vsync = VSYNC_GPIO_NUM;
  config.pin_href = HREF_GPIO_NUM;
  config.pin_sccb_sda = SIOD_GPIO_NUM;
  config.pin_sccb_scl = SIOC_GPIO_NUM;
  config.pin_pwdn = PWDN_GPIO_NUM;
  config.pin_reset = RESET_GPIO_NUM;
  config.xclk_freq_hz = 20000000;
  config.frame_size = FRAMESIZE_UXGA;
  config.pixel_format = PIXFORMAT_JPEG; // for streaming
  //config.pixel_format = PIXFORMAT_RGB565; // for face detection/recognition
  config.grab_mode = CAMERA_GRAB_WHEN_EMPTY;
  config.fb_location = CAMERA_FB_IN_PSRAM;
  config.jpeg_quality = 12;
  config.fb_count = 1;
  
  // if PSRAM IC present, init with UXGA resolution and higher JPEG quality
  //                      for larger pre-allocated frame buffer.
    if(psramFound()){
      config.jpeg_quality = 10;
      config.fb_count = 2;
      config.grab_mode = CAMERA_GRAB_LATEST;
    } else {
      // Limit the frame size when PSRAM is not available
      config.frame_size = FRAMESIZE_SVGA;
      config.fb_location = CAMERA_FB_IN_DRAM;
    }


  // camera init
  esp_err_t err = esp_camera_init(&config);
  if (err != ESP_OK) {
    Serial.printf("Camera init failed with error 0x%x", err);
    return;
  }

  sensor_t * s = esp_camera_sensor_get();
  // initial sensors are flipped vertically and colors are a bit saturated

  // drop down frame size for higher initial frame rate
  if(config.pixel_format == PIXFORMAT_JPEG){
    s->set_framesize(s, FRAMESIZE_QVGA);
  }

// Setup LED FLash if LED pin is defined in camera_pins.h
#if defined(LED_GPIO_NUM)
  setupLedFlash(LED_GPIO_NUM);
#endif

  wifiConnect();

  startCameraServer();
}

void loop() {
  // Do nothing. Everything is done in another task by the web server
  buttonEvent();
}

void wifiConnect(){
    WiFi.begin(ssid, password);
  WiFi.setSleep(false);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

  Serial.print("Camera Ready! Use 'http://");
  Serial.print(WiFi.localIP());
}

camera_fb_t* capture(){
  digitalWrite(4,HIGH);
  delay(300);
  camera_fb_t *fb = NULL;
  esp_err_t res = ESP_OK;
  fb = esp_camera_fb_get();
  delay(200);
  digitalWrite(4,LOW);
  return fb;
}

void buttonEvent(){
  buttonState = digitalRead(buttonPin);  // read the state of the pushbutton

  if (buttonState == HIGH) {  // if button is pressed
    currentMillis = millis();  // record the current time

    if (currentMillis - previousMillis >= interval) {
      digitalWrite(ledPin, HIGH);  // turn on LED if interval is greater than 5 seconds
      sendingImage();
    }

    previousMillis = currentMillis;  // update previous time to current time
  } else {
    digitalWrite(ledPin, LOW);  // turn off LED if button is not pressed
  }
}

void parsingResult(String response){
  Serial.println(response);
}

void sendingImage(){
  camera_fb_t *fb = capture();
  if(!fb || fb->format != PIXFORMAT_JPEG){
    Serial.println("Camera capture failed");
    esp_camera_fb_return(fb);
    return;
  }else{
      postingImage(fb);
    esp_camera_fb_return(fb);
  }
}

void postingImage(camera_fb_t *fb){
  HTTPClient client;
  client.begin("https://shielded-savannah-03474-2136069c7f29.herokuapp.com/");
  client.addHeader("Content-Type", "image/jpeg");
  int httpResponseCode = client.POST(fb->buf, fb->len);
  Serial.println("Making Post Request");
  if(httpResponseCode == 200){
    String response = client.getString();
    parsingResult(response);
  }else{
    Serial.println("Check your server");
  }
 
  client.end();
}