import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, LazyJsonString as __LazyJsonString, limitedParseFloat32 as __limitedParseFloat32, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, HumanLoopQuotaExceededException, IdempotentParameterMismatchException, ImageTooLargeException, InternalServerError, InvalidImageFormatException, InvalidManifestException, InvalidPaginationTokenException, InvalidParameterException, InvalidPolicyRevisionIdException, InvalidS3ObjectException, LimitExceededException, MalformedPolicyDocumentException, ProvisionedThroughputExceededException, ResourceAlreadyExistsException, ResourceInUseException, ResourceNotFoundException, ResourceNotReadyException, ServiceQuotaExceededException, SessionNotFoundException, ThrottlingException, } from "../models/models_0";
import { VideoTooLargeException, } from "../models/models_1";
import { RekognitionServiceException as __BaseException } from "../models/RekognitionServiceException";
export const se_AssociateFacesCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateFaces");
    let body;
    body = JSON.stringify(se_AssociateFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CompareFacesCommand = async (input, context) => {
    const headers = sharedHeaders("CompareFaces");
    let body;
    body = JSON.stringify(se_CompareFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CopyProjectVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CopyProjectVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateCollectionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCollection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateFaceLivenessSessionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFaceLivenessSession");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateProjectVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProjectVersion");
    let body;
    body = JSON.stringify(se_CreateProjectVersionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStreamProcessor");
    let body;
    body = JSON.stringify(se_CreateStreamProcessorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateUserCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUser");
    let body;
    body = JSON.stringify(se_CreateUserRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteCollectionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCollection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteFacesCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProject");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteProjectPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProjectPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteProjectVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProjectVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStreamProcessor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteUserCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUser");
    let body;
    body = JSON.stringify(se_DeleteUserRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeCollectionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCollection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeDatasetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataset");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeProjects");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeProjectVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeProjectVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStreamProcessor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectCustomLabelsCommand = async (input, context) => {
    const headers = sharedHeaders("DetectCustomLabels");
    let body;
    body = JSON.stringify(se_DetectCustomLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectFacesCommand = async (input, context) => {
    const headers = sharedHeaders("DetectFaces");
    let body;
    body = JSON.stringify(se_DetectFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectLabelsCommand = async (input, context) => {
    const headers = sharedHeaders("DetectLabels");
    let body;
    body = JSON.stringify(se_DetectLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectModerationLabelsCommand = async (input, context) => {
    const headers = sharedHeaders("DetectModerationLabels");
    let body;
    body = JSON.stringify(se_DetectModerationLabelsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectProtectiveEquipmentCommand = async (input, context) => {
    const headers = sharedHeaders("DetectProtectiveEquipment");
    let body;
    body = JSON.stringify(se_DetectProtectiveEquipmentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DetectTextCommand = async (input, context) => {
    const headers = sharedHeaders("DetectText");
    let body;
    body = JSON.stringify(se_DetectTextRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateFacesCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateFaces");
    let body;
    body = JSON.stringify(se_DisassociateFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DistributeDatasetEntriesCommand = async (input, context) => {
    const headers = sharedHeaders("DistributeDatasetEntries");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCelebrityInfoCommand = async (input, context) => {
    const headers = sharedHeaders("GetCelebrityInfo");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetCelebrityRecognitionCommand = async (input, context) => {
    const headers = sharedHeaders("GetCelebrityRecognition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetContentModerationCommand = async (input, context) => {
    const headers = sharedHeaders("GetContentModeration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetFaceDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetFaceDetection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetFaceLivenessSessionResultsCommand = async (input, context) => {
    const headers = sharedHeaders("GetFaceLivenessSessionResults");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetFaceSearchCommand = async (input, context) => {
    const headers = sharedHeaders("GetFaceSearch");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetLabelDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetLabelDetection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetMediaAnalysisJobCommand = async (input, context) => {
    const headers = sharedHeaders("GetMediaAnalysisJob");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetPersonTrackingCommand = async (input, context) => {
    const headers = sharedHeaders("GetPersonTracking");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetSegmentDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetSegmentDetection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetTextDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("GetTextDetection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_IndexFacesCommand = async (input, context) => {
    const headers = sharedHeaders("IndexFaces");
    let body;
    body = JSON.stringify(se_IndexFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListCollectionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCollections");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetEntriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasetEntries");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListDatasetLabelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDatasetLabels");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListFacesCommand = async (input, context) => {
    const headers = sharedHeaders("ListFaces");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListMediaAnalysisJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMediaAnalysisJobs");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListProjectPoliciesCommand = async (input, context) => {
    const headers = sharedHeaders("ListProjectPolicies");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListStreamProcessorsCommand = async (input, context) => {
    const headers = sharedHeaders("ListStreamProcessors");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListUsersCommand = async (input, context) => {
    const headers = sharedHeaders("ListUsers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutProjectPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutProjectPolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RecognizeCelebritiesCommand = async (input, context) => {
    const headers = sharedHeaders("RecognizeCelebrities");
    let body;
    body = JSON.stringify(se_RecognizeCelebritiesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchFacesCommand = async (input, context) => {
    const headers = sharedHeaders("SearchFaces");
    let body;
    body = JSON.stringify(se_SearchFacesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchFacesByImageCommand = async (input, context) => {
    const headers = sharedHeaders("SearchFacesByImage");
    let body;
    body = JSON.stringify(se_SearchFacesByImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchUsersCommand = async (input, context) => {
    const headers = sharedHeaders("SearchUsers");
    let body;
    body = JSON.stringify(se_SearchUsersRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SearchUsersByImageCommand = async (input, context) => {
    const headers = sharedHeaders("SearchUsersByImage");
    let body;
    body = JSON.stringify(se_SearchUsersByImageRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartCelebrityRecognitionCommand = async (input, context) => {
    const headers = sharedHeaders("StartCelebrityRecognition");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartContentModerationCommand = async (input, context) => {
    const headers = sharedHeaders("StartContentModeration");
    let body;
    body = JSON.stringify(se_StartContentModerationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartFaceDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("StartFaceDetection");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartFaceSearchCommand = async (input, context) => {
    const headers = sharedHeaders("StartFaceSearch");
    let body;
    body = JSON.stringify(se_StartFaceSearchRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartLabelDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("StartLabelDetection");
    let body;
    body = JSON.stringify(se_StartLabelDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartMediaAnalysisJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartMediaAnalysisJob");
    let body;
    body = JSON.stringify(se_StartMediaAnalysisJobRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartPersonTrackingCommand = async (input, context) => {
    const headers = sharedHeaders("StartPersonTracking");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartProjectVersionCommand = async (input, context) => {
    const headers = sharedHeaders("StartProjectVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartSegmentDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("StartSegmentDetection");
    let body;
    body = JSON.stringify(se_StartSegmentDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("StartStreamProcessor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StartTextDetectionCommand = async (input, context) => {
    const headers = sharedHeaders("StartTextDetection");
    let body;
    body = JSON.stringify(se_StartTextDetectionRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopProjectVersionCommand = async (input, context) => {
    const headers = sharedHeaders("StopProjectVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_StopStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("StopStreamProcessor");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateDatasetEntriesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDatasetEntries");
    let body;
    body = JSON.stringify(se_UpdateDatasetEntriesRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateStreamProcessorCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateStreamProcessor");
    let body;
    body = JSON.stringify(se_UpdateStreamProcessorRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AssociateFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_AssociateFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CompareFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CompareFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CopyProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateFaceLivenessSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteProjectPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeCollectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeCollectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeDatasetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeDatasetResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeProjectsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeProjectVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeProjectVersionsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeStreamProcessorResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DetectCustomLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectCustomLabelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DetectFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DetectLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectLabelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DetectModerationLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectModerationLabelsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DetectProtectiveEquipmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectProtectiveEquipmentResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DetectTextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DetectTextResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DistributeDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCelebrityInfoCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetCelebrityRecognitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetCelebrityRecognitionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetContentModerationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetContentModerationResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetFaceDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetFaceDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetFaceLivenessSessionResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetFaceLivenessSessionResultsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetFaceSearchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetFaceSearchResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetLabelDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetLabelDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetMediaAnalysisJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetMediaAnalysisJobResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetPersonTrackingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetPersonTrackingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetSegmentDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetSegmentDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetTextDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetTextDetectionResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_IndexFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_IndexFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListCollectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListDatasetLabelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListMediaAnalysisJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListMediaAnalysisJobsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListProjectPoliciesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListProjectPoliciesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListStreamProcessorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutProjectPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RecognizeCelebritiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RecognizeCelebritiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SearchFacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchFacesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SearchFacesByImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchFacesByImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SearchUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchUsersResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SearchUsersByImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SearchUsersByImageResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartCelebrityRecognitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartContentModerationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartFaceDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartFaceSearchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartLabelDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartMediaAnalysisJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartPersonTrackingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartSegmentDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StartTextDetectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopProjectVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_StopStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateDatasetEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateStreamProcessorCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.rekognition#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.rekognition#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.rekognition#IdempotentParameterMismatchException":
            throw await de_IdempotentParameterMismatchExceptionRes(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.rekognition#InternalServerError":
            throw await de_InternalServerErrorRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.rekognition#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.rekognition#ProvisionedThroughputExceededException":
            throw await de_ProvisionedThroughputExceededExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.rekognition#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.rekognition#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.rekognition#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ImageTooLargeException":
        case "com.amazonaws.rekognition#ImageTooLargeException":
            throw await de_ImageTooLargeExceptionRes(parsedOutput, context);
        case "InvalidImageFormatException":
        case "com.amazonaws.rekognition#InvalidImageFormatException":
            throw await de_InvalidImageFormatExceptionRes(parsedOutput, context);
        case "InvalidS3ObjectException":
        case "com.amazonaws.rekognition#InvalidS3ObjectException":
            throw await de_InvalidS3ObjectExceptionRes(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.rekognition#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.rekognition#ResourceInUseException":
            throw await de_ResourceInUseExceptionRes(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.rekognition#ResourceAlreadyExistsException":
            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
        case "InvalidPolicyRevisionIdException":
        case "com.amazonaws.rekognition#InvalidPolicyRevisionIdException":
            throw await de_InvalidPolicyRevisionIdExceptionRes(parsedOutput, context);
        case "InvalidPaginationTokenException":
        case "com.amazonaws.rekognition#InvalidPaginationTokenException":
            throw await de_InvalidPaginationTokenExceptionRes(parsedOutput, context);
        case "ResourceNotReadyException":
        case "com.amazonaws.rekognition#ResourceNotReadyException":
            throw await de_ResourceNotReadyExceptionRes(parsedOutput, context);
        case "HumanLoopQuotaExceededException":
        case "com.amazonaws.rekognition#HumanLoopQuotaExceededException":
            throw await de_HumanLoopQuotaExceededExceptionRes(parsedOutput, context);
        case "SessionNotFoundException":
        case "com.amazonaws.rekognition#SessionNotFoundException":
            throw await de_SessionNotFoundExceptionRes(parsedOutput, context);
        case "MalformedPolicyDocumentException":
        case "com.amazonaws.rekognition#MalformedPolicyDocumentException":
            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);
        case "VideoTooLargeException":
        case "com.amazonaws.rekognition#VideoTooLargeException":
            throw await de_VideoTooLargeExceptionRes(parsedOutput, context);
        case "InvalidManifestException":
        case "com.amazonaws.rekognition#InvalidManifestException":
            throw await de_InvalidManifestExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_HumanLoopQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new HumanLoopQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_IdempotentParameterMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ImageTooLargeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ImageTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerErrorRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidImageFormatExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidImageFormatException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidManifestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidManifestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidPaginationTokenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPaginationTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidPolicyRevisionIdExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidPolicyRevisionIdException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidS3ObjectExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidS3ObjectException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ProvisionedThroughputExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceInUseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotReadyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotReadyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_SessionNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new SessionNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_VideoTooLargeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new VideoTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AssociateFacesRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CollectionId: [],
        FaceIds: _json,
        UserId: [],
        UserMatchThreshold: __serializeFloat,
    });
};
const se_BlackFrame = (input, context) => {
    return take(input, {
        MaxPixelThreshold: __serializeFloat,
        MinCoveragePercentage: __serializeFloat,
    });
};
const se_BoundingBox = (input, context) => {
    return take(input, {
        Height: __serializeFloat,
        Left: __serializeFloat,
        Top: __serializeFloat,
        Width: __serializeFloat,
    });
};
const se_CompareFacesRequest = (input, context) => {
    return take(input, {
        QualityFilter: [],
        SimilarityThreshold: __serializeFloat,
        SourceImage: (_) => se_Image(_, context),
        TargetImage: (_) => se_Image(_, context),
    });
};
const se_ConnectedHomeSettings = (input, context) => {
    return take(input, {
        Labels: _json,
        MinConfidence: __serializeFloat,
    });
};
const se_ConnectedHomeSettingsForUpdate = (input, context) => {
    return take(input, {
        Labels: _json,
        MinConfidence: __serializeFloat,
    });
};
const se_CreateProjectVersionRequest = (input, context) => {
    return take(input, {
        FeatureConfig: (_) => se_CustomizationFeatureConfig(_, context),
        KmsKeyId: [],
        OutputConfig: _json,
        ProjectArn: [],
        Tags: _json,
        TestingData: _json,
        TrainingData: _json,
        VersionDescription: [],
        VersionName: [],
    });
};
const se_CreateStreamProcessorRequest = (input, context) => {
    return take(input, {
        DataSharingPreference: _json,
        Input: _json,
        KmsKeyId: [],
        Name: [],
        NotificationChannel: _json,
        Output: _json,
        RegionsOfInterest: (_) => se_RegionsOfInterest(_, context),
        RoleArn: [],
        Settings: (_) => se_StreamProcessorSettings(_, context),
        Tags: _json,
    });
};
const se_CreateUserRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CollectionId: [],
        UserId: [],
    });
};
const se_CustomizationFeatureConfig = (input, context) => {
    return take(input, {
        ContentModeration: (_) => se_CustomizationFeatureContentModerationConfig(_, context),
    });
};
const se_CustomizationFeatureContentModerationConfig = (input, context) => {
    return take(input, {
        ConfidenceThreshold: __serializeFloat,
    });
};
const se_DatasetChanges = (input, context) => {
    return take(input, {
        GroundTruth: context.base64Encoder,
    });
};
const se_DeleteUserRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CollectionId: [],
        UserId: [],
    });
};
const se_DetectCustomLabelsRequest = (input, context) => {
    return take(input, {
        Image: (_) => se_Image(_, context),
        MaxResults: [],
        MinConfidence: __serializeFloat,
        ProjectVersionArn: [],
    });
};
const se_DetectFacesRequest = (input, context) => {
    return take(input, {
        Attributes: _json,
        Image: (_) => se_Image(_, context),
    });
};
const se_DetectionFilter = (input, context) => {
    return take(input, {
        MinBoundingBoxHeight: __serializeFloat,
        MinBoundingBoxWidth: __serializeFloat,
        MinConfidence: __serializeFloat,
    });
};
const se_DetectLabelsRequest = (input, context) => {
    return take(input, {
        Features: _json,
        Image: (_) => se_Image(_, context),
        MaxLabels: [],
        MinConfidence: __serializeFloat,
        Settings: _json,
    });
};
const se_DetectModerationLabelsRequest = (input, context) => {
    return take(input, {
        HumanLoopConfig: _json,
        Image: (_) => se_Image(_, context),
        MinConfidence: __serializeFloat,
        ProjectVersion: [],
    });
};
const se_DetectProtectiveEquipmentRequest = (input, context) => {
    return take(input, {
        Image: (_) => se_Image(_, context),
        SummarizationAttributes: (_) => se_ProtectiveEquipmentSummarizationAttributes(_, context),
    });
};
const se_DetectTextFilters = (input, context) => {
    return take(input, {
        RegionsOfInterest: (_) => se_RegionsOfInterest(_, context),
        WordFilter: (_) => se_DetectionFilter(_, context),
    });
};
const se_DetectTextRequest = (input, context) => {
    return take(input, {
        Filters: (_) => se_DetectTextFilters(_, context),
        Image: (_) => se_Image(_, context),
    });
};
const se_DisassociateFacesRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CollectionId: [],
        FaceIds: _json,
        UserId: [],
    });
};
const se_FaceSearchSettings = (input, context) => {
    return take(input, {
        CollectionId: [],
        FaceMatchThreshold: __serializeFloat,
    });
};
const se_Image = (input, context) => {
    return take(input, {
        Bytes: context.base64Encoder,
        S3Object: _json,
    });
};
const se_IndexFacesRequest = (input, context) => {
    return take(input, {
        CollectionId: [],
        DetectionAttributes: _json,
        ExternalImageId: [],
        Image: (_) => se_Image(_, context),
        MaxFaces: [],
        QualityFilter: [],
    });
};
const se_MediaAnalysisDetectModerationLabelsConfig = (input, context) => {
    return take(input, {
        MinConfidence: __serializeFloat,
        ProjectVersion: [],
    });
};
const se_MediaAnalysisOperationsConfig = (input, context) => {
    return take(input, {
        DetectModerationLabels: (_) => se_MediaAnalysisDetectModerationLabelsConfig(_, context),
    });
};
const se_Point = (input, context) => {
    return take(input, {
        X: __serializeFloat,
        Y: __serializeFloat,
    });
};
const se_Polygon = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Point(entry, context);
    });
};
const se_ProtectiveEquipmentSummarizationAttributes = (input, context) => {
    return take(input, {
        MinConfidence: __serializeFloat,
        RequiredEquipmentTypes: _json,
    });
};
const se_RecognizeCelebritiesRequest = (input, context) => {
    return take(input, {
        Image: (_) => se_Image(_, context),
    });
};
const se_RegionOfInterest = (input, context) => {
    return take(input, {
        BoundingBox: (_) => se_BoundingBox(_, context),
        Polygon: (_) => se_Polygon(_, context),
    });
};
const se_RegionsOfInterest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_RegionOfInterest(entry, context);
    });
};
const se_SearchFacesByImageRequest = (input, context) => {
    return take(input, {
        CollectionId: [],
        FaceMatchThreshold: __serializeFloat,
        Image: (_) => se_Image(_, context),
        MaxFaces: [],
        QualityFilter: [],
    });
};
const se_SearchFacesRequest = (input, context) => {
    return take(input, {
        CollectionId: [],
        FaceId: [],
        FaceMatchThreshold: __serializeFloat,
        MaxFaces: [],
    });
};
const se_SearchUsersByImageRequest = (input, context) => {
    return take(input, {
        CollectionId: [],
        Image: (_) => se_Image(_, context),
        MaxUsers: [],
        QualityFilter: [],
        UserMatchThreshold: __serializeFloat,
    });
};
const se_SearchUsersRequest = (input, context) => {
    return take(input, {
        CollectionId: [],
        FaceId: [],
        MaxUsers: [],
        UserId: [],
        UserMatchThreshold: __serializeFloat,
    });
};
const se_StartContentModerationRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [],
        JobTag: [],
        MinConfidence: __serializeFloat,
        NotificationChannel: _json,
        Video: _json,
    });
};
const se_StartFaceSearchRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [],
        CollectionId: [],
        FaceMatchThreshold: __serializeFloat,
        JobTag: [],
        NotificationChannel: _json,
        Video: _json,
    });
};
const se_StartLabelDetectionRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [],
        Features: _json,
        JobTag: [],
        MinConfidence: __serializeFloat,
        NotificationChannel: _json,
        Settings: _json,
        Video: _json,
    });
};
const se_StartMediaAnalysisJobRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Input: _json,
        JobName: [],
        KmsKeyId: [],
        OperationsConfig: (_) => se_MediaAnalysisOperationsConfig(_, context),
        OutputConfig: _json,
    });
};
const se_StartSegmentDetectionFilters = (input, context) => {
    return take(input, {
        ShotFilter: (_) => se_StartShotDetectionFilter(_, context),
        TechnicalCueFilter: (_) => se_StartTechnicalCueDetectionFilter(_, context),
    });
};
const se_StartSegmentDetectionRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [],
        Filters: (_) => se_StartSegmentDetectionFilters(_, context),
        JobTag: [],
        NotificationChannel: _json,
        SegmentTypes: _json,
        Video: _json,
    });
};
const se_StartShotDetectionFilter = (input, context) => {
    return take(input, {
        MinSegmentConfidence: __serializeFloat,
    });
};
const se_StartTechnicalCueDetectionFilter = (input, context) => {
    return take(input, {
        BlackFrame: (_) => se_BlackFrame(_, context),
        MinSegmentConfidence: __serializeFloat,
    });
};
const se_StartTextDetectionFilters = (input, context) => {
    return take(input, {
        RegionsOfInterest: (_) => se_RegionsOfInterest(_, context),
        WordFilter: (_) => se_DetectionFilter(_, context),
    });
};
const se_StartTextDetectionRequest = (input, context) => {
    return take(input, {
        ClientRequestToken: [],
        Filters: (_) => se_StartTextDetectionFilters(_, context),
        JobTag: [],
        NotificationChannel: _json,
        Video: _json,
    });
};
const se_StreamProcessorSettings = (input, context) => {
    return take(input, {
        ConnectedHome: (_) => se_ConnectedHomeSettings(_, context),
        FaceSearch: (_) => se_FaceSearchSettings(_, context),
    });
};
const se_StreamProcessorSettingsForUpdate = (input, context) => {
    return take(input, {
        ConnectedHomeForUpdate: (_) => se_ConnectedHomeSettingsForUpdate(_, context),
    });
};
const se_UpdateDatasetEntriesRequest = (input, context) => {
    return take(input, {
        Changes: (_) => se_DatasetChanges(_, context),
        DatasetArn: [],
    });
};
const se_UpdateStreamProcessorRequest = (input, context) => {
    return take(input, {
        DataSharingPreferenceForUpdate: _json,
        Name: [],
        ParametersToDelete: _json,
        RegionsOfInterestForUpdate: (_) => se_RegionsOfInterest(_, context),
        SettingsForUpdate: (_) => se_StreamProcessorSettingsForUpdate(_, context),
    });
};
const de_AssociateFacesResponse = (output, context) => {
    return take(output, {
        AssociatedFaces: _json,
        UnsuccessfulFaceAssociations: (_) => de_UnsuccessfulFaceAssociationList(_, context),
        UserStatus: __expectString,
    });
};
const de_AuditImage = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Bytes: context.base64Decoder,
        S3Object: _json,
    });
};
const de_AuditImages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuditImage(entry, context);
    });
    return retVal;
};
const de_Beard = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Value: __expectBoolean,
    });
};
const de_BodyParts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProtectiveEquipmentBodyPart(entry, context);
    });
    return retVal;
};
const de_BoundingBox = (output, context) => {
    return take(output, {
        Height: __limitedParseFloat32,
        Left: __limitedParseFloat32,
        Top: __limitedParseFloat32,
        Width: __limitedParseFloat32,
    });
};
const de_Celebrity = (output, context) => {
    return take(output, {
        Face: (_) => de_ComparedFace(_, context),
        Id: __expectString,
        KnownGender: _json,
        MatchConfidence: __limitedParseFloat32,
        Name: __expectString,
        Urls: _json,
    });
};
const de_CelebrityDetail = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Confidence: __limitedParseFloat32,
        Face: (_) => de_FaceDetail(_, context),
        Id: __expectString,
        KnownGender: _json,
        Name: __expectString,
        Urls: _json,
    });
};
const de_CelebrityList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Celebrity(entry, context);
    });
    return retVal;
};
const de_CelebrityRecognition = (output, context) => {
    return take(output, {
        Celebrity: (_) => de_CelebrityDetail(_, context),
        Timestamp: __expectLong,
    });
};
const de_CelebrityRecognitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CelebrityRecognition(entry, context);
    });
    return retVal;
};
const de_ComparedFace = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Confidence: __limitedParseFloat32,
        Emotions: (_) => de_Emotions(_, context),
        Landmarks: (_) => de_Landmarks(_, context),
        Pose: (_) => de_Pose(_, context),
        Quality: (_) => de_ImageQuality(_, context),
        Smile: (_) => de_Smile(_, context),
    });
};
const de_ComparedFaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComparedFace(entry, context);
    });
    return retVal;
};
const de_ComparedSourceImageFace = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Confidence: __limitedParseFloat32,
    });
};
const de_CompareFacesMatch = (output, context) => {
    return take(output, {
        Face: (_) => de_ComparedFace(_, context),
        Similarity: __limitedParseFloat32,
    });
};
const de_CompareFacesMatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CompareFacesMatch(entry, context);
    });
    return retVal;
};
const de_CompareFacesResponse = (output, context) => {
    return take(output, {
        FaceMatches: (_) => de_CompareFacesMatchList(_, context),
        SourceImageFace: (_) => de_ComparedSourceImageFace(_, context),
        SourceImageOrientationCorrection: __expectString,
        TargetImageOrientationCorrection: __expectString,
        UnmatchedFaces: (_) => de_CompareFacesUnmatchList(_, context),
    });
};
const de_CompareFacesUnmatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComparedFace(entry, context);
    });
    return retVal;
};
const de_ConnectedHomeSettings = (output, context) => {
    return take(output, {
        Labels: _json,
        MinConfidence: __limitedParseFloat32,
    });
};
const de_ContentModerationDetection = (output, context) => {
    return take(output, {
        ContentTypes: (_) => de_ContentTypes(_, context),
        DurationMillis: __expectLong,
        EndTimestampMillis: __expectLong,
        ModerationLabel: (_) => de_ModerationLabel(_, context),
        StartTimestampMillis: __expectLong,
        Timestamp: __expectLong,
    });
};
const de_ContentModerationDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContentModerationDetection(entry, context);
    });
    return retVal;
};
const de_ContentType = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Name: __expectString,
    });
};
const de_ContentTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContentType(entry, context);
    });
    return retVal;
};
const de_CoversBodyPart = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Value: __expectBoolean,
    });
};
const de_CustomizationFeatureConfig = (output, context) => {
    return take(output, {
        ContentModeration: (_) => de_CustomizationFeatureContentModerationConfig(_, context),
    });
};
const de_CustomizationFeatureContentModerationConfig = (output, context) => {
    return take(output, {
        ConfidenceThreshold: __limitedParseFloat32,
    });
};
const de_CustomLabel = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Geometry: (_) => de_Geometry(_, context),
        Name: __expectString,
    });
};
const de_CustomLabels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomLabel(entry, context);
    });
    return retVal;
};
const de_DatasetDescription = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetStats: _json,
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Status: __expectString,
        StatusMessage: __expectString,
        StatusMessageCode: __expectString,
    });
};
const de_DatasetMetadata = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DatasetArn: __expectString,
        DatasetType: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
        StatusMessageCode: __expectString,
    });
};
const de_DatasetMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DatasetMetadata(entry, context);
    });
    return retVal;
};
const de_DescribeCollectionResponse = (output, context) => {
    return take(output, {
        CollectionARN: __expectString,
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FaceCount: __expectLong,
        FaceModelVersion: __expectString,
        UserCount: __expectLong,
    });
};
const de_DescribeDatasetResponse = (output, context) => {
    return take(output, {
        DatasetDescription: (_) => de_DatasetDescription(_, context),
    });
};
const de_DescribeProjectsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ProjectDescriptions: (_) => de_ProjectDescriptions(_, context),
    });
};
const de_DescribeProjectVersionsResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ProjectVersionDescriptions: (_) => de_ProjectVersionDescriptions(_, context),
    });
};
const de_DescribeStreamProcessorResponse = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DataSharingPreference: _json,
        Input: _json,
        KmsKeyId: __expectString,
        LastUpdateTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Name: __expectString,
        NotificationChannel: _json,
        Output: _json,
        RegionsOfInterest: (_) => de_RegionsOfInterest(_, context),
        RoleArn: __expectString,
        Settings: (_) => de_StreamProcessorSettings(_, context),
        Status: __expectString,
        StatusMessage: __expectString,
        StreamProcessorArn: __expectString,
    });
};
const de_DetectCustomLabelsResponse = (output, context) => {
    return take(output, {
        CustomLabels: (_) => de_CustomLabels(_, context),
    });
};
const de_DetectFacesResponse = (output, context) => {
    return take(output, {
        FaceDetails: (_) => de_FaceDetailList(_, context),
        OrientationCorrection: __expectString,
    });
};
const de_DetectLabelsImageBackground = (output, context) => {
    return take(output, {
        DominantColors: (_) => de_DominantColors(_, context),
        Quality: (_) => de_DetectLabelsImageQuality(_, context),
    });
};
const de_DetectLabelsImageForeground = (output, context) => {
    return take(output, {
        DominantColors: (_) => de_DominantColors(_, context),
        Quality: (_) => de_DetectLabelsImageQuality(_, context),
    });
};
const de_DetectLabelsImageProperties = (output, context) => {
    return take(output, {
        Background: (_) => de_DetectLabelsImageBackground(_, context),
        DominantColors: (_) => de_DominantColors(_, context),
        Foreground: (_) => de_DetectLabelsImageForeground(_, context),
        Quality: (_) => de_DetectLabelsImageQuality(_, context),
    });
};
const de_DetectLabelsImageQuality = (output, context) => {
    return take(output, {
        Brightness: __limitedParseFloat32,
        Contrast: __limitedParseFloat32,
        Sharpness: __limitedParseFloat32,
    });
};
const de_DetectLabelsResponse = (output, context) => {
    return take(output, {
        ImageProperties: (_) => de_DetectLabelsImageProperties(_, context),
        LabelModelVersion: __expectString,
        Labels: (_) => de_Labels(_, context),
        OrientationCorrection: __expectString,
    });
};
const de_DetectModerationLabelsResponse = (output, context) => {
    return take(output, {
        ContentTypes: (_) => de_ContentTypes(_, context),
        HumanLoopActivationOutput: (_) => de_HumanLoopActivationOutput(_, context),
        ModerationLabels: (_) => de_ModerationLabels(_, context),
        ModerationModelVersion: __expectString,
        ProjectVersion: __expectString,
    });
};
const de_DetectProtectiveEquipmentResponse = (output, context) => {
    return take(output, {
        Persons: (_) => de_ProtectiveEquipmentPersons(_, context),
        ProtectiveEquipmentModelVersion: __expectString,
        Summary: _json,
    });
};
const de_DetectTextResponse = (output, context) => {
    return take(output, {
        TextDetections: (_) => de_TextDetectionList(_, context),
        TextModelVersion: __expectString,
    });
};
const de_DominantColor = (output, context) => {
    return take(output, {
        Blue: __expectInt32,
        CSSColor: __expectString,
        Green: __expectInt32,
        HexCode: __expectString,
        PixelPercent: __limitedParseFloat32,
        Red: __expectInt32,
        SimplifiedColor: __expectString,
    });
};
const de_DominantColors = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DominantColor(entry, context);
    });
    return retVal;
};
const de_Emotion = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Type: __expectString,
    });
};
const de_Emotions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Emotion(entry, context);
    });
    return retVal;
};
const de_EquipmentDetection = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Confidence: __limitedParseFloat32,
        CoversBodyPart: (_) => de_CoversBodyPart(_, context),
        Type: __expectString,
    });
};
const de_EquipmentDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EquipmentDetection(entry, context);
    });
    return retVal;
};
const de_EvaluationResult = (output, context) => {
    return take(output, {
        F1Score: __limitedParseFloat32,
        Summary: _json,
    });
};
const de_EyeDirection = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Pitch: __limitedParseFloat32,
        Yaw: __limitedParseFloat32,
    });
};
const de_Eyeglasses = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Value: __expectBoolean,
    });
};
const de_EyeOpen = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Value: __expectBoolean,
    });
};
const de_Face = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Confidence: __limitedParseFloat32,
        ExternalImageId: __expectString,
        FaceId: __expectString,
        ImageId: __expectString,
        IndexFacesModelVersion: __expectString,
        UserId: __expectString,
    });
};
const de_FaceDetail = (output, context) => {
    return take(output, {
        AgeRange: _json,
        Beard: (_) => de_Beard(_, context),
        BoundingBox: (_) => de_BoundingBox(_, context),
        Confidence: __limitedParseFloat32,
        Emotions: (_) => de_Emotions(_, context),
        EyeDirection: (_) => de_EyeDirection(_, context),
        Eyeglasses: (_) => de_Eyeglasses(_, context),
        EyesOpen: (_) => de_EyeOpen(_, context),
        FaceOccluded: (_) => de_FaceOccluded(_, context),
        Gender: (_) => de_Gender(_, context),
        Landmarks: (_) => de_Landmarks(_, context),
        MouthOpen: (_) => de_MouthOpen(_, context),
        Mustache: (_) => de_Mustache(_, context),
        Pose: (_) => de_Pose(_, context),
        Quality: (_) => de_ImageQuality(_, context),
        Smile: (_) => de_Smile(_, context),
        Sunglasses: (_) => de_Sunglasses(_, context),
    });
};
const de_FaceDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FaceDetail(entry, context);
    });
    return retVal;
};
const de_FaceDetection = (output, context) => {
    return take(output, {
        Face: (_) => de_FaceDetail(_, context),
        Timestamp: __expectLong,
    });
};
const de_FaceDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FaceDetection(entry, context);
    });
    return retVal;
};
const de_FaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Face(entry, context);
    });
    return retVal;
};
const de_FaceMatch = (output, context) => {
    return take(output, {
        Face: (_) => de_Face(_, context),
        Similarity: __limitedParseFloat32,
    });
};
const de_FaceMatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FaceMatch(entry, context);
    });
    return retVal;
};
const de_FaceOccluded = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Value: __expectBoolean,
    });
};
const de_FaceRecord = (output, context) => {
    return take(output, {
        Face: (_) => de_Face(_, context),
        FaceDetail: (_) => de_FaceDetail(_, context),
    });
};
const de_FaceRecordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FaceRecord(entry, context);
    });
    return retVal;
};
const de_FaceSearchSettings = (output, context) => {
    return take(output, {
        CollectionId: __expectString,
        FaceMatchThreshold: __limitedParseFloat32,
    });
};
const de_Gender = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Value: __expectString,
    });
};
const de_Geometry = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Polygon: (_) => de_Polygon(_, context),
    });
};
const de_GetCelebrityRecognitionResponse = (output, context) => {
    return take(output, {
        Celebrities: (_) => de_CelebrityRecognitions(_, context),
        JobId: __expectString,
        JobStatus: __expectString,
        JobTag: __expectString,
        NextToken: __expectString,
        StatusMessage: __expectString,
        Video: _json,
        VideoMetadata: (_) => de_VideoMetadata(_, context),
    });
};
const de_GetContentModerationResponse = (output, context) => {
    return take(output, {
        GetRequestMetadata: _json,
        JobId: __expectString,
        JobStatus: __expectString,
        JobTag: __expectString,
        ModerationLabels: (_) => de_ContentModerationDetections(_, context),
        ModerationModelVersion: __expectString,
        NextToken: __expectString,
        StatusMessage: __expectString,
        Video: _json,
        VideoMetadata: (_) => de_VideoMetadata(_, context),
    });
};
const de_GetFaceDetectionResponse = (output, context) => {
    return take(output, {
        Faces: (_) => de_FaceDetections(_, context),
        JobId: __expectString,
        JobStatus: __expectString,
        JobTag: __expectString,
        NextToken: __expectString,
        StatusMessage: __expectString,
        Video: _json,
        VideoMetadata: (_) => de_VideoMetadata(_, context),
    });
};
const de_GetFaceLivenessSessionResultsResponse = (output, context) => {
    return take(output, {
        AuditImages: (_) => de_AuditImages(_, context),
        Confidence: __limitedParseFloat32,
        ReferenceImage: (_) => de_AuditImage(_, context),
        SessionId: __expectString,
        Status: __expectString,
    });
};
const de_GetFaceSearchResponse = (output, context) => {
    return take(output, {
        JobId: __expectString,
        JobStatus: __expectString,
        JobTag: __expectString,
        NextToken: __expectString,
        Persons: (_) => de_PersonMatches(_, context),
        StatusMessage: __expectString,
        Video: _json,
        VideoMetadata: (_) => de_VideoMetadata(_, context),
    });
};
const de_GetLabelDetectionResponse = (output, context) => {
    return take(output, {
        GetRequestMetadata: _json,
        JobId: __expectString,
        JobStatus: __expectString,
        JobTag: __expectString,
        LabelModelVersion: __expectString,
        Labels: (_) => de_LabelDetections(_, context),
        NextToken: __expectString,
        StatusMessage: __expectString,
        Video: _json,
        VideoMetadata: (_) => de_VideoMetadata(_, context),
    });
};
const de_GetMediaAnalysisJobResponse = (output, context) => {
    return take(output, {
        CompletionTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureDetails: _json,
        Input: _json,
        JobId: __expectString,
        JobName: __expectString,
        KmsKeyId: __expectString,
        ManifestSummary: _json,
        OperationsConfig: (_) => de_MediaAnalysisOperationsConfig(_, context),
        OutputConfig: _json,
        Results: _json,
        Status: __expectString,
    });
};
const de_GetPersonTrackingResponse = (output, context) => {
    return take(output, {
        JobId: __expectString,
        JobStatus: __expectString,
        JobTag: __expectString,
        NextToken: __expectString,
        Persons: (_) => de_PersonDetections(_, context),
        StatusMessage: __expectString,
        Video: _json,
        VideoMetadata: (_) => de_VideoMetadata(_, context),
    });
};
const de_GetSegmentDetectionResponse = (output, context) => {
    return take(output, {
        AudioMetadata: _json,
        JobId: __expectString,
        JobStatus: __expectString,
        JobTag: __expectString,
        NextToken: __expectString,
        Segments: (_) => de_SegmentDetections(_, context),
        SelectedSegmentTypes: _json,
        StatusMessage: __expectString,
        Video: _json,
        VideoMetadata: (_) => de_VideoMetadataList(_, context),
    });
};
const de_GetTextDetectionResponse = (output, context) => {
    return take(output, {
        JobId: __expectString,
        JobStatus: __expectString,
        JobTag: __expectString,
        NextToken: __expectString,
        StatusMessage: __expectString,
        TextDetections: (_) => de_TextDetectionResults(_, context),
        TextModelVersion: __expectString,
        Video: _json,
        VideoMetadata: (_) => de_VideoMetadata(_, context),
    });
};
const de_HumanLoopActivationOutput = (output, context) => {
    return take(output, {
        HumanLoopActivationConditionsEvaluationResults: (_) => new __LazyJsonString(_),
        HumanLoopActivationReasons: _json,
        HumanLoopArn: __expectString,
    });
};
const de_ImageQuality = (output, context) => {
    return take(output, {
        Brightness: __limitedParseFloat32,
        Sharpness: __limitedParseFloat32,
    });
};
const de_IndexFacesResponse = (output, context) => {
    return take(output, {
        FaceModelVersion: __expectString,
        FaceRecords: (_) => de_FaceRecordList(_, context),
        OrientationCorrection: __expectString,
        UnindexedFaces: (_) => de_UnindexedFaces(_, context),
    });
};
const de_Instance = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Confidence: __limitedParseFloat32,
        DominantColors: (_) => de_DominantColors(_, context),
    });
};
const de_Instances = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Instance(entry, context);
    });
    return retVal;
};
const de_Label = (output, context) => {
    return take(output, {
        Aliases: _json,
        Categories: _json,
        Confidence: __limitedParseFloat32,
        Instances: (_) => de_Instances(_, context),
        Name: __expectString,
        Parents: _json,
    });
};
const de_LabelDetection = (output, context) => {
    return take(output, {
        DurationMillis: __expectLong,
        EndTimestampMillis: __expectLong,
        Label: (_) => de_Label(_, context),
        StartTimestampMillis: __expectLong,
        Timestamp: __expectLong,
    });
};
const de_LabelDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LabelDetection(entry, context);
    });
    return retVal;
};
const de_Labels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Label(entry, context);
    });
    return retVal;
};
const de_Landmark = (output, context) => {
    return take(output, {
        Type: __expectString,
        X: __limitedParseFloat32,
        Y: __limitedParseFloat32,
    });
};
const de_Landmarks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Landmark(entry, context);
    });
    return retVal;
};
const de_ListFacesResponse = (output, context) => {
    return take(output, {
        FaceModelVersion: __expectString,
        Faces: (_) => de_FaceList(_, context),
        NextToken: __expectString,
    });
};
const de_ListMediaAnalysisJobsResponse = (output, context) => {
    return take(output, {
        MediaAnalysisJobs: (_) => de_MediaAnalysisJobDescriptions(_, context),
        NextToken: __expectString,
    });
};
const de_ListProjectPoliciesResponse = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ProjectPolicies: (_) => de_ProjectPolicies(_, context),
    });
};
const de_MediaAnalysisDetectModerationLabelsConfig = (output, context) => {
    return take(output, {
        MinConfidence: __limitedParseFloat32,
        ProjectVersion: __expectString,
    });
};
const de_MediaAnalysisJobDescription = (output, context) => {
    return take(output, {
        CompletionTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        FailureDetails: _json,
        Input: _json,
        JobId: __expectString,
        JobName: __expectString,
        KmsKeyId: __expectString,
        ManifestSummary: _json,
        OperationsConfig: (_) => de_MediaAnalysisOperationsConfig(_, context),
        OutputConfig: _json,
        Results: _json,
        Status: __expectString,
    });
};
const de_MediaAnalysisJobDescriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MediaAnalysisJobDescription(entry, context);
    });
    return retVal;
};
const de_MediaAnalysisOperationsConfig = (output, context) => {
    return take(output, {
        DetectModerationLabels: (_) => de_MediaAnalysisDetectModerationLabelsConfig(_, context),
    });
};
const de_ModerationLabel = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Name: __expectString,
        ParentName: __expectString,
        TaxonomyLevel: __expectInt32,
    });
};
const de_ModerationLabels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModerationLabel(entry, context);
    });
    return retVal;
};
const de_MouthOpen = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Value: __expectBoolean,
    });
};
const de_Mustache = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Value: __expectBoolean,
    });
};
const de_PersonDetail = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Face: (_) => de_FaceDetail(_, context),
        Index: __expectLong,
    });
};
const de_PersonDetection = (output, context) => {
    return take(output, {
        Person: (_) => de_PersonDetail(_, context),
        Timestamp: __expectLong,
    });
};
const de_PersonDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PersonDetection(entry, context);
    });
    return retVal;
};
const de_PersonMatch = (output, context) => {
    return take(output, {
        FaceMatches: (_) => de_FaceMatchList(_, context),
        Person: (_) => de_PersonDetail(_, context),
        Timestamp: __expectLong,
    });
};
const de_PersonMatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PersonMatch(entry, context);
    });
    return retVal;
};
const de_Point = (output, context) => {
    return take(output, {
        X: __limitedParseFloat32,
        Y: __limitedParseFloat32,
    });
};
const de_Polygon = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Point(entry, context);
    });
    return retVal;
};
const de_Pose = (output, context) => {
    return take(output, {
        Pitch: __limitedParseFloat32,
        Roll: __limitedParseFloat32,
        Yaw: __limitedParseFloat32,
    });
};
const de_ProjectDescription = (output, context) => {
    return take(output, {
        AutoUpdate: __expectString,
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Datasets: (_) => de_DatasetMetadataList(_, context),
        Feature: __expectString,
        ProjectArn: __expectString,
        Status: __expectString,
    });
};
const de_ProjectDescriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProjectDescription(entry, context);
    });
    return retVal;
};
const de_ProjectPolicies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProjectPolicy(entry, context);
    });
    return retVal;
};
const de_ProjectPolicy = (output, context) => {
    return take(output, {
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        LastUpdatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        PolicyDocument: __expectString,
        PolicyName: __expectString,
        PolicyRevisionId: __expectString,
        ProjectArn: __expectString,
    });
};
const de_ProjectVersionDescription = (output, context) => {
    return take(output, {
        BaseModelVersion: __expectString,
        BillableTrainingTimeInSeconds: __expectLong,
        CreationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        EvaluationResult: (_) => de_EvaluationResult(_, context),
        Feature: __expectString,
        FeatureConfig: (_) => de_CustomizationFeatureConfig(_, context),
        KmsKeyId: __expectString,
        ManifestSummary: _json,
        MaxInferenceUnits: __expectInt32,
        MinInferenceUnits: __expectInt32,
        OutputConfig: _json,
        ProjectVersionArn: __expectString,
        SourceProjectVersionArn: __expectString,
        Status: __expectString,
        StatusMessage: __expectString,
        TestingDataResult: _json,
        TrainingDataResult: _json,
        TrainingEndTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        VersionDescription: __expectString,
    });
};
const de_ProjectVersionDescriptions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProjectVersionDescription(entry, context);
    });
    return retVal;
};
const de_ProtectiveEquipmentBodyPart = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        EquipmentDetections: (_) => de_EquipmentDetections(_, context),
        Name: __expectString,
    });
};
const de_ProtectiveEquipmentPerson = (output, context) => {
    return take(output, {
        BodyParts: (_) => de_BodyParts(_, context),
        BoundingBox: (_) => de_BoundingBox(_, context),
        Confidence: __limitedParseFloat32,
        Id: __expectInt32,
    });
};
const de_ProtectiveEquipmentPersons = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProtectiveEquipmentPerson(entry, context);
    });
    return retVal;
};
const de_RecognizeCelebritiesResponse = (output, context) => {
    return take(output, {
        CelebrityFaces: (_) => de_CelebrityList(_, context),
        OrientationCorrection: __expectString,
        UnrecognizedFaces: (_) => de_ComparedFaceList(_, context),
    });
};
const de_RegionOfInterest = (output, context) => {
    return take(output, {
        BoundingBox: (_) => de_BoundingBox(_, context),
        Polygon: (_) => de_Polygon(_, context),
    });
};
const de_RegionsOfInterest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RegionOfInterest(entry, context);
    });
    return retVal;
};
const de_SearchedFaceDetails = (output, context) => {
    return take(output, {
        FaceDetail: (_) => de_FaceDetail(_, context),
    });
};
const de_SearchFacesByImageResponse = (output, context) => {
    return take(output, {
        FaceMatches: (_) => de_FaceMatchList(_, context),
        FaceModelVersion: __expectString,
        SearchedFaceBoundingBox: (_) => de_BoundingBox(_, context),
        SearchedFaceConfidence: __limitedParseFloat32,
    });
};
const de_SearchFacesResponse = (output, context) => {
    return take(output, {
        FaceMatches: (_) => de_FaceMatchList(_, context),
        FaceModelVersion: __expectString,
        SearchedFaceId: __expectString,
    });
};
const de_SearchUsersByImageResponse = (output, context) => {
    return take(output, {
        FaceModelVersion: __expectString,
        SearchedFace: (_) => de_SearchedFaceDetails(_, context),
        UnsearchedFaces: (_) => de_UnsearchedFacesList(_, context),
        UserMatches: (_) => de_UserMatchList(_, context),
    });
};
const de_SearchUsersResponse = (output, context) => {
    return take(output, {
        FaceModelVersion: __expectString,
        SearchedFace: _json,
        SearchedUser: _json,
        UserMatches: (_) => de_UserMatchList(_, context),
    });
};
const de_SegmentDetection = (output, context) => {
    return take(output, {
        DurationFrames: __expectLong,
        DurationMillis: __expectLong,
        DurationSMPTE: __expectString,
        EndFrameNumber: __expectLong,
        EndTimecodeSMPTE: __expectString,
        EndTimestampMillis: __expectLong,
        ShotSegment: (_) => de_ShotSegment(_, context),
        StartFrameNumber: __expectLong,
        StartTimecodeSMPTE: __expectString,
        StartTimestampMillis: __expectLong,
        TechnicalCueSegment: (_) => de_TechnicalCueSegment(_, context),
        Type: __expectString,
    });
};
const de_SegmentDetections = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SegmentDetection(entry, context);
    });
    return retVal;
};
const de_ShotSegment = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Index: __expectLong,
    });
};
const de_Smile = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Value: __expectBoolean,
    });
};
const de_StreamProcessorSettings = (output, context) => {
    return take(output, {
        ConnectedHome: (_) => de_ConnectedHomeSettings(_, context),
        FaceSearch: (_) => de_FaceSearchSettings(_, context),
    });
};
const de_Sunglasses = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Value: __expectBoolean,
    });
};
const de_TechnicalCueSegment = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        Type: __expectString,
    });
};
const de_TextDetection = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        DetectedText: __expectString,
        Geometry: (_) => de_Geometry(_, context),
        Id: __expectInt32,
        ParentId: __expectInt32,
        Type: __expectString,
    });
};
const de_TextDetectionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TextDetection(entry, context);
    });
    return retVal;
};
const de_TextDetectionResult = (output, context) => {
    return take(output, {
        TextDetection: (_) => de_TextDetection(_, context),
        Timestamp: __expectLong,
    });
};
const de_TextDetectionResults = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TextDetectionResult(entry, context);
    });
    return retVal;
};
const de_UnindexedFace = (output, context) => {
    return take(output, {
        FaceDetail: (_) => de_FaceDetail(_, context),
        Reasons: _json,
    });
};
const de_UnindexedFaces = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnindexedFace(entry, context);
    });
    return retVal;
};
const de_UnsearchedFace = (output, context) => {
    return take(output, {
        FaceDetails: (_) => de_FaceDetail(_, context),
        Reasons: _json,
    });
};
const de_UnsearchedFacesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnsearchedFace(entry, context);
    });
    return retVal;
};
const de_UnsuccessfulFaceAssociation = (output, context) => {
    return take(output, {
        Confidence: __limitedParseFloat32,
        FaceId: __expectString,
        Reasons: _json,
        UserId: __expectString,
    });
};
const de_UnsuccessfulFaceAssociationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnsuccessfulFaceAssociation(entry, context);
    });
    return retVal;
};
const de_UserMatch = (output, context) => {
    return take(output, {
        Similarity: __limitedParseFloat32,
        User: _json,
    });
};
const de_UserMatchList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserMatch(entry, context);
    });
    return retVal;
};
const de_VideoMetadata = (output, context) => {
    return take(output, {
        Codec: __expectString,
        ColorRange: __expectString,
        DurationMillis: __expectLong,
        Format: __expectString,
        FrameHeight: __expectLong,
        FrameRate: __limitedParseFloat32,
        FrameWidth: __expectLong,
    });
};
const de_VideoMetadataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VideoMetadata(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `RekognitionService.${operation}`,
    };
}
